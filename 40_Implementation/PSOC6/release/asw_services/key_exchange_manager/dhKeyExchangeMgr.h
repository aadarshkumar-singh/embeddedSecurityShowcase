/****************************************************************************
* Filename        : dhKeyExchangeMgr.h
* Author          : Aadarsh Kumar Singh
* Description     : Header file that declares APIs for Deffie Helmann(DH) Key
*                   exchange algorithm.
* Created on	  : Jun 19, 2020
****************************************************************************/

#ifndef ASW_SERVICES_KEY_EXCHANGE_MANAGER_DHKEYEXCHANGEMGR_H_
#define ASW_SERVICES_KEY_EXCHANGE_MANAGER_DHKEYEXCHANGEMGR_H_

/***************************************************************************
 * Includes
 ***************************************************************************/

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "dhKeyExchangeServiceCfg.h"
#include "mbedtls/version.h"
#include "mbed.h"
#include "mbedtls/entropy.h"
#include "mbedtls/ctr_drbg.h"
#include "mbedtls/ecdh.h"
#include "psa/crypto.h"

/**
 * \brief class to define APIs for Deffie Helmann(DH) Key exchange algorithm.
 *
 * \note  shared secret key of 16 bytes is generated from the DH public key
 *        received from the ally. The ally generates the secret key from
 *        the DH public key which is generated by the context created by this class.
 */
class dhKeyExchangeMgr
{
	/**
	 * \brief Error status of Key exchange operation
	 */
	errorTypeKeyExchange_T m_errorStatus;

	/**
	 * \brief Elliptic Curve Deffie Helmann Context
	 */
	mbedtls_ecdh_context m_ctx;

	/**
	 * \brief Context for dynamic random number generator
	 */
	mbedtls_ctr_drbg_context* m_ctr_drbg;

	/**
	* \brief Initializes deffie-Helmann key exchange services
	*
	* @return errorTypeKeyExchange_T : error code of deffie Helmann key exchange manager
	*/
	errorTypeKeyExchange_T intializeDhKeyExchangeServices();

public:

	/**
	 *  \brief Constructor to initialize diffie hellmann algorithm
	 */
	dhKeyExchangeMgr();

	/**
	 * \brief Generate the Deffie Helmann keys using Elliptic Curve 25519
	 * 		  creates key to be exchanged
	 *
	 * @param publicKeyForExchange[i/o] : Deffie Helmann public key that has to be exchanged
	 *
	 * @return errorTypeKeyExchange_T : error code of deffie Helmann key exchange manager
	 */
	errorTypeKeyExchange_T generateDhKey(uint8_t *publicKeyForExchange);

	/**
	* \brief Computes the shared secret key using deffie helmann algorithm
	*		 using received deffie helmann public key of the ally
	*
	* @param exchangedPublicKey[i]: received deffie helmann public key of the ally
	* @param encryptionKey[o] : shared secret Key for Encryption
	* @return errorTypeKeyExchange_T : error code of deffie Helmann key exchange manager
	*/
	errorTypeKeyExchange_T computeSharedSecretDhKey(uint8_t *exchangedPublicKey ,uint8_t *encryptionKey);

	/**
	 * \destructor to free the created resources
	 */
	virtual ~dhKeyExchangeMgr();
};

#endif /* ASW_SERVICES_KEY_EXCHANGE_MANAGER_DHKEYEXCHANGEMGR_H_ */

/****************************************************************************
* Filename        : encryptServicesCfg.h
* Author          : Aadarsh Kumar Singh
* Description     : Header file that provides configuration required for AES
* 					block mode of encryption and ECDSA signature.
* Created on	  : Jun 28, 2020
****************************************************************************/

#ifndef ASW_SERVICES_ENCRYPTION_MANAGER_ENCRYPTSERVICESCFG_H_
#define ASW_SERVICES_ENCRYPTION_MANAGER_ENCRYPTSERVICESCFG_H_

/***************************************************************************
 * Includes
 ***************************************************************************/

#include <stdlib.h>
#include "mbedtls/version.h"
#include "mbed.h"

/***************************************************************************
 * Macro Definitions
 ***************************************************************************/

/************************ < Macros for AES Encryption **********************/

/**< Type of algorithm used for encryption */
#define AES_ENCRYPTION_TYPE PSA_KEY_TYPE_AES

/**< Size of block supported by PSoC hardware crypto for AES algorithm */
#define AES_BLOCK_SIZE_SUPPORTED_BY_HW 16

/**< Length of key required by AES algorithm */
#define AES_ENCRYPTION_KEY_SIZE 16

/************************ < Macros for ECDSA Signature **********************/

/**< Length of signature generated by ECDSA algorithm */
#define ECDSA_SIGN_LENGTH 64

/**< Length of public key generated by ECDSA algorithm */
#define ECDSA_PUB_KEY_LENGTH 65


/***************************************************************************
 * Enumerations and Type definitions
 ***************************************************************************/

/**
 * \brief AES Algorithms supported by the user application
 */
enum typeOfEncryptAlgo_e
{
	ENCRYPT_CBC_NO_PADDING,  //!< ENCRYPT_CBC_NO_PADDING
	ENCRYPT_CBC_WITH_PADDING,//!< ENCRYPT_CBC_WITH_PADDING
};

/**
 * \brief Error code type of algorithm used by encryption manager
 */
typedef typeOfEncryptAlgo_e typeOfEncryptAlgo_t ;

/**
 * \brief Error Status for AES Encryption
 */
enum errorTypeEncrypt_e
{
	ENCRYPT_INIT_FAIL,          /**< ENCRYPT_INIT_FAIL */
	ENCRYPT_PADDING_FAIL,       /**< ENCRYPT_PADDING_FAIL */
	ENCRYPT_HANDLE_FAIL,        /**< ENCRYPT_HANDLE_FAIL */
	ENCYPT_INVALID_BLOCK_SIZE,  /**< ENCYPT_INVALID_BLOCK_SIZE */
	ENCRYPT_INVALID_ALGO,       /**< ENCRYPT_INVALID_ALGO */
	ENCRYPT_CIPHER_SETUP_FAIL,  /**< ENCRYPT_CIPHER_SETUP_FAIL */
	ENCRYPT_IV_GENERATE_FAIL,   /**< ENCRYPT_IV_GENERATE_FAIL */
	ENCRYPT_CIPHER_UPDATE_FAIL, /**< ENCRYPT_CIPHER_UPDATE_FAIL */
	ENCRYPT_CIPHER_NOT_FINISHED,/**< ENCRYPT_CIPHER_NOT_FINISHED */
	ENCRYPT_VALID_BLOCK_SIZE,   /**< ENCRYPT_VALID_BLOCK_SIZE */
	ENCRYPT_VALID_ALGO,         /**< ENCRYPT_VALID_ALGO */
	ENCRYPT_HANDLE_SUCCESS,     /**< ENCRYPT_HANDLE_SUCCESS */
	ENCRYPT_PADDING_SUCCESS,    /**< ENCRYPT_PADDING_SUCCESS */
	ENCRYPT_INIT_SUCCESS,       /**< ENCRYPT_INIT_SUCCESS */
	ENCRYPT_SUCCESS,            /**< ENCRYPT_SUCCESS */
};

/**
 * \brief Error code type of encryption manager
 */
typedef errorTypeEncrypt_e errorTypeEncrypt_t ;

/**
 * \brief Size of key(in bits) used for encryption
 */
typedef enum key_bits
{
	        key_bits_256 = 256/**< key_bits_256 */
} key_bits_t;

/**
 * \brief The structure to store the signature and the public key
 * 		  along with their respective length generated by ECDSA
 * 		  signature algorithm.
 */
typedef struct uartData
{
	uint8_t publicKey[ECDSA_PUB_KEY_LENGTH];
	uint8_t signature[ECDSA_SIGN_LENGTH];
	size_t signature_length = ECDSA_SIGN_LENGTH;
	size_t publiKey_length = ECDSA_PUB_KEY_LENGTH;

}uartData_t;


/***************************************************************************
 * Global variables
 ***************************************************************************/

/**
 * \brief This key is present as a global define for the purpose of application
 * 		  used for testing the encryption manager. In the real-use case the key
 * 		  used for encryption will be Diffie Hellman shared secret key.
 * 		  This key will be generated using Diffie Hellman Algorithm.
 */
static const uint8_t defaultEncryptAesKeyBuf[AES_ENCRYPTION_KEY_SIZE] =
{
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
    0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa,
};

#endif /* ASW_SERVICES_ENCRYPTION_MANAGER_ENCRYPTSERVICESCFG_H_ */
